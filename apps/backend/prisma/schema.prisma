generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  username  String?  @unique
  avatarUrl String?
  platform  String   @default("twitter")

  email         String? @unique // legacy
  twitterHandle String? @unique // legacy

  // Referral system
  referralCode String @unique @default(cuid())
  referredById Int?
  referredBy   User?  @relation("UserReferrals", fields: [referredById], references: [id])
  referrals    User[] @relation("UserReferrals")

  // Onboarding
  onboardingStep Int @default(0) // 0 = start, 1 = follow, 2 = invite, 3 = wallet
  completedTasks Int @default(0)
  earnedPoints   Int @default(0)

  kol   KOL?    @relation(fields: [kolId], references: [id])
  kolId String? @unique

  wallets         Wallet[]
  primaryWalletId Int?     @unique
  primaryWallet   Wallet?  @relation("PrimaryWallet", fields: [primaryWalletId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  chain     String
  userId    Int
  verified  Boolean  @default(false)
  label     String? // Название сети (Ethereum, BNB Chain)
  symbol    String? // Символ токена (ETH, BNB)
  explorer  String? // Ссылка на блок-обозреватель (https://etherscan.io)
  createdAt DateTime @default(now())

  user       User  @relation(fields: [userId], references: [id])
  primaryFor User? @relation("PrimaryWallet")

  @@index([userId])
}

model Narrative {
  id           String  @id @default(cuid())
  narrativeId  String  @unique
  name         String
  slug         String
  description  String?
  projectCount Int

  // Activity
  totalViews Float
  totalPosts Int

  // Market Cap
  totalMarketCapUsd  Float
  marketCapChange24h Float
  marketCapChange7d  Float
  marketCapChange30d Float
  marketCapChange90d Float

  // Mindshare
  mindsharePercent   Float
  mindshareChange24h Float
  mindshareChange7d  Float
  mindshareChange30d Float
  mindshareChange90d Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fetchedAt DateTime @default(now())

  projectLinks ProjectToNarrative[]

  narrativeSnapshot NarrativeSnapshot[]
  projectSnapshot   ProjectSnapshot[]

  @@index([id])
  @@index([narrativeId])
  @@index([name])
}

model NarrativeSnapshot {
  id           String @id @default(cuid())
  narrativeId  String
  projectCount Int

  // Activity
  totalViews Float
  totalPosts Int

  // Market Cap
  totalMarketCapUsd  Float
  marketCapChange24h Float
  marketCapChange7d  Float
  marketCapChange30d Float
  marketCapChange90d Float

  // Mindshare
  mindsharePercent   Float
  mindshareChange24h Float
  mindshareChange7d  Float
  mindshareChange30d Float
  mindshareChange90d Float

  source      String // например: "Protokols", "Manual"
  updatedBy   String // например: "cron", "adminUserId", "system"
  fetchedDate String // "yyyy-mm-dd"

  narrative Narrative @relation(fields: [narrativeId], references: [narrativeId])

  @@unique([narrativeId, fetchedDate])
  @@index([narrativeId])
  @@index([fetchedDate])
}

model Project {
  id    String  @id @default(uuid())
  stage String?

  featured Boolean @default(false)
  hidden   Boolean @default(false)

  // Admin created

  // Mindshare (global mindshare calculate from narrative mindshare)
  mindshare Float

  // Twitter profile
  twitterId              String
  twitterUsername        String
  twitterDisplayName     String
  twitterAvatarUrl       String
  twitterDescription     String
  twitterDescriptionLink String?
  twitterFollowersCount  Int
  twitterFollowingCount  Int
  twitterIsVerified      Boolean
  twitterGoldBadge       Boolean?
  twitterLang            String
  twitterCreatedAt       DateTime

  // Coin data
  coinSymbol          String
  coinMarketCap       Float
  coinPrice           Float
  coinContractAddress String?
  coinName            String
  coinImageUrl        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fetchedAt DateTime @default(now())

  projectSnapshot ProjectSnapshot[]
  narrativeLinks  ProjectToNarrative[]
  rewardPools     RewardPool[]
  kols            KOLToProject[]

  @@unique([twitterId])
  @@unique([twitterUsername])
  @@index([twitterUsername])
  @@index([coinMarketCap])
  @@index([createdAt])
  @@index([twitterFollowersCount])
  @@index([coinPrice])
}

model ProjectSnapshot {
  id String @id @default(cuid())

  // Activity
  totalViews Int
  totalPosts Int

  // Mindshare
  mindsharePercent   Float
  mindshareChange24h Float
  mindshareChange7d  Float
  mindshareChange30d Float
  mindshareChange90d Float

  // Meta
  source      String // например: "Protokols"
  updatedBy   String // например: "cron", "adminUserId", "system"
  fetchedDate String // "yyyy-mm-dd"

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  narrative   Narrative? @relation(fields: [narrativeId], references: [id])
  narrativeId String?

  @@unique([projectId, narrativeId, fetchedDate])
  @@index([projectId])
  @@index([fetchedDate])
}

model ProjectToNarrative {
  id          String @id @default(uuid())
  narrativeId String
  projectId   String

  // Activity
  totalViews Int
  totalPosts Int

  // Mindshare
  mindsharePercent   Float
  mindshareChange24h Float
  mindshareChange7d  Float
  mindshareChange30d Float
  mindshareChange90d Float

  narrative Narrative @relation(fields: [narrativeId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now())

  @@unique([narrativeId, projectId])
  @@index([narrativeId])
  @@index([projectId])
}

model KOL {
  id            String  @id @default(uuid())
  hidden        Boolean @default(false)
  isAlsoProject Boolean @default(false)

  // Twitter profile
  twitterId              String
  twitterUsername        String
  twitterDisplayName     String
  twitterAvatarUrl       String
  twitterDescription     String
  twitterDescriptionLink String?
  twitterFollowersCount  Int
  twitterFollowingCount  Int
  twitterIsVerified      Boolean
  twitterGoldBadge       Boolean?
  twitterLang            String
  twitterCreatedAt       DateTime

  // Main metrics
  kolScore                 Float?
  kolScorePercentFromTotal Float?
  smartFollowersCount      Int?
  threadsCount             Int?
  engagementRate           Float?
  smartEngagement          Float?

  // Average metrics
  avgViews Int?
  avgLikes Int?

  // Total metrics
  totalPosts        Int?
  totalViews        BigInt? @db.BigInt
  totalInteractions BigInt? @db.BigInt

  // Total organic metrics
  totalOrganicPosts        Int?
  totalOrganicViews        BigInt? @db.BigInt
  totalOrganicInteractions BigInt? @db.BigInt

  // Total account metrics
  totalAccountPosts        Int?
  totalAccountViews        BigInt? @db.BigInt
  totalAccountInteractions BigInt? @db.BigInt
  totalAccountComments     Int?
  totalAccountLikes        Int?
  totalAccountRetweets     Int?
  totalAccountReplies      Int?

  // Change metrics
  totalPostsChange        Float?
  totalInteractionsChange Float?
  totalViewsChange        Float?
  followersChange         Float?
  smartEngagementChange   Float?

  projects    KOLToProject[]
  kolSnapshot KOLSnapshot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fetchedAt DateTime @default(now())
  user      User?

  @@unique([twitterId])
  @@unique([twitterUsername])
  @@index([kolScore])
  @@index([hidden])
  @@index([kolScore, hidden])
  @@index([twitterUsername])
  @@index([twitterId])
}

model KOLSnapshot {
  id    String @id @default(cuid())
  kolId String

  // Main metrics
  kolScore            Float
  smartFollowersCount Int
  threadsCount        Int
  engagementRate      Float
  smartEngagement     Float

  // Average metrics
  avgViews Int?
  avgLikes Int?

  // Total metrics
  totalPosts        Int
  totalViews        BigInt @db.BigInt
  totalInteractions BigInt @db.BigInt

  // Total organic metrics
  totalOrganicPosts        Int
  totalOrganicViews        BigInt @db.BigInt
  totalOrganicInteractions BigInt @db.BigInt

  // Total account metrics
  totalAccountPosts        Int
  totalAccountViews        BigInt @db.BigInt
  totalAccountInteractions BigInt @db.BigInt
  totalAccountComments     Int
  totalAccountLikes        Int
  totalAccountRetweets     Int
  totalAccountReplies      Int

  // Change metrics
  totalPostsChange        Float
  totalInteractionsChange Float
  totalViewsChange        Float
  followersChange         Float
  smartEngagementChange   Float

  fetchedDate String // формат "yyyy-mm-dd"

  kol KOL @relation(fields: [kolId], references: [id])

  @@unique([kolId, fetchedDate])
  @@index([kolId, fetchedDate])
}

model KOLToProject {
  id        String @id @default(cuid())
  kolId     String
  projectId String

  // Total metrics from project
  totalPosts        Int
  totalViews        BigInt @db.BigInt
  totalInteractions BigInt @db.BigInt
  totalComments     BigInt @db.BigInt

  // Syntetic metrics
  qualityScore Float? // 1 * log1p(avgLikes) + 1.5 * log1p(totalComments) + 0.1 * log1p(avgViews)
  proofOfWork  Float? // totalPosts + qualityScore
  mindoMetric  Float? // proofOfWork * kolScore

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fetchedAt DateTime @default(now())

  kol     KOL     @relation(fields: [kolId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([kolId, projectId])
  @@index([mindoMetric])
  @@index([kolId])
  @@index([projectId])
}

model RewardPool {
  id                  String           @id @default(cuid())
  title               String
  description         String
  reward              String
  rewardRate          Float?
  rewardUnit          String?
  deadline            DateTime
  platforms           String[]
  status              RewardPoolStatus
  totalAmountUsd      Float
  paidOutUsd          Float
  campaignTargetViews Int
  participantsCount   Int
  completedCount      Int
  requirements        String[]
  project             Project          @relation(fields: [projectId], references: [id])
  projectId           String
}

enum RewardPoolStatus {
  active
  upcoming
  closed
}

model Log {
  id        String   @id @default(cuid())
  level     String // 'SUCCESS' | 'ERROR' | 'RETRY' | 'FATAL' | etc
  message   String
  url       String?
  timestamp DateTime @default(now())
}

generator zod {
  provider = "npx zod-prisma-types"
  output   = "../../frontend/src/zod"
}
