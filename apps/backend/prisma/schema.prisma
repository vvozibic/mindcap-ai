generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id            Int      @id @default(autoincrement())
  email         String?  @unique
  twitterHandle String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  username      String?  @unique
  avatarUrl     String?
  platform      String?
}

model Project {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  category      String?
  website       String?
  launchDate    DateTime?
  marketCap     String?
  avatarUrl     String?
  mindshare     Float     @default(0)
  kolAttention  String?
  engagement    String?
  trustScore    String?
  discord       String?
  twitter       String?
  telegram      String?
  rewardPoolUsd String?
  rewardRank    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  rawData       Json?
  categories    String[]  @default([])
  featured      Boolean   @default(false)
  mentions      Mention[]

  @@index([marketCap])
  @@index([slug])
  @@index([createdAt])
  @@index([category])
  @@index([featured])
}

model Influencer {
  id                    String   @id @default(cuid())
  name                  String
  username              String   @unique
  badges                String?
  bio                   String?
  avatarUrl             String?
  platform              String?
  businessAccount       Boolean  @default(false)
  followings            String
  expertise             String?
  profileUrl            String?
  mindshare             String?
  mindshareNum          Float?   @default(0)
  mindsharePercent      Float    @default(0)
  smartFollowersPercent Float    @default(0)
  pow                   String?
  poi                   String?
  poe                   String?
  followersCount        String
  moneyScore            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  fetchedAt             DateTime @default(now())

  bannerUrl             String?
  tweetsCount           String
  verified              Boolean                        @default(false)
  twitterScoutJsonRaw   Json?
  followersCountNumeric Int?                           @default(0)
  followingsNumeric     Int?                           @default(0)
  tweetsCountNumeric    Int?                           @default(0)
  avgLikes              Int?
  avgViews              Int?
  engagementRate        Float?
  kolScore              Int?                           @default(0)
  protokolsJsonRaw      Json?
  totalPosts            Int?
  smartFollowers        Int?
  totalComments         Int?
  totalLikes            Int?
  totalReplies          Int?
  totalRetweets         Int?
  totalViews            Int?
  twitterRegisterDate   String?
  mentions              Mention[]
  projects              InfluencerToProtokolsProject[]

  @@index([followersCountNumeric])
  @@index([tweetsCountNumeric])
  @@index([username])
  @@index([createdAt])
}

model ProtokolsProject {
  id                 String                         @id @default(uuid())
  name               String
  symbol             String
  slug               String?
  avatarUrl          String?
  bannerUrl          String?
  description        String?
  twitterUsername    String
  twitterId          String?
  isVerified         Boolean?
  stage              String?
  followersCount     Int?
  followingCount     Int?
  twitterCreatedAt   DateTime?
  coingeckoImageUrl  String?
  marketCap          Float?
  price              Float?
  contractAddress    String?
  featured           Boolean                        @default(false)
  hidden             Boolean                        @default(false)
  totalViews         Int?
  totalPosts         Int?
  mindsharePercent   Float?
  mindshareChange24h Float?
  mindshareChange7d  Float?
  mindshareChange30d Float?
  mindshareChange90d Float?
  createdAt          DateTime                       @default(now())
  updatedAt          DateTime                       @updatedAt
  fetchedAt          DateTime                       @default(now())
  narrativeLinks     NarrativeToProtokolsProject[]
  rewardPools        RewardPool[]
  influencers        InfluencerToProtokolsProject[]

  @@unique([twitterId])
  @@index([slug])
  @@index([twitterUsername])
  @@index([mindsharePercent])
  @@index([marketCap])
  @@index([createdAt])
  @@index([followersCount])
  @@index([totalViews])
  @@index([price])
  @@index([featured, mindsharePercent])
}

model RewardPool {
  id                  String           @id @default(cuid())
  title               String
  description         String
  reward              String
  rewardRate          Float?
  rewardUnit          String?
  deadline            DateTime
  platforms           String[]
  status              RewardPoolStatus
  totalAmountUsd      Float
  paidOutUsd          Float
  campaignTargetViews Int
  participantsCount   Int
  completedCount      Int
  requirements        String[]
  project             ProtokolsProject @relation(fields: [projectId], references: [id])
  projectId           String
}

enum RewardPoolStatus {
  active
  upcoming
  closed
}

model Narrative {
  id                 String                        @id @default(cuid())
  narrativeId        String                        @unique
  name               String
  slug               String
  description        String?
  projectCount       Int
  totalViews         Float
  totalPosts         Int
  marketCapUsd       Float
  marketCapChange24h Float
  marketCapChange7d  Float
  marketCapChange30d Float
  marketCapChange90d Float
  mindsharePercent   Float
  mindshareChange24h Float
  mindshareChange7d  Float
  mindshareChange30d Float
  mindshareChange90d Float
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  fetchedAt          DateTime                      @default(now())
  projectLinks       NarrativeToProtokolsProject[]

  @@index([id])
  @@index([narrativeId])
  @@index([name])
}

model NarrativeToProtokolsProject {
  id                      String           @id @default(uuid())
  narrativeId             String
  protokolsProjectId      String
  projectMindsharePercent Float            @default(0)
  narrative               Narrative        @relation(fields: [narrativeId], references: [id])
  protokolsProject        ProtokolsProject @relation(fields: [protokolsProjectId], references: [id])
  createdAt               DateTime         @default(now())

  @@unique([narrativeId, protokolsProjectId])
  @@index([narrativeId])
  @@index([protokolsProjectId])
}

model InfluencerToProtokolsProject {
  id           String @id @default(cuid())
  influencerId String
  projectId    String

  influencer Influencer       @relation(fields: [influencerId], references: [id])
  project    ProtokolsProject @relation(fields: [projectId], references: [id])

  @@unique([influencerId, projectId])
  @@index([projectId])
  @@index([influencerId])
}

model Mention {
  id             String     @id @default(cuid())
  projectId      String
  influencerId   String
  mindshare      String?
  pow            String?
  poi            String?
  poe            String?
  smartFollowers String?
  createdAt      DateTime   @default(now())
  influencer     Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  project        Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PageVisit {
  id        String   @id @default(cuid())
  path      String
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  @@index([path])
  @@index([createdAt])
}
